// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package calculator

import (
	"bytes"
	"reflect"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	tracker "github.com/damnever/thrift-tracker"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = reflect.DeepEqual
var _ = context.TODO()
var _ = tracker.VersionDefault
var _ = bytes.Equal

//Exceptions
type CalculatorErrorCode int64
const (
  CalculatorErrorCode_UNKNOWN_ERROR CalculatorErrorCode = 0
  CalculatorErrorCode_DATABASE_ERROR CalculatorErrorCode = 1
  CalculatorErrorCode_TOO_BUSY_ERROR CalculatorErrorCode = 2
)

func (p CalculatorErrorCode) String() string {
  switch p {
  case CalculatorErrorCode_UNKNOWN_ERROR: return "UNKNOWN_ERROR"
  case CalculatorErrorCode_DATABASE_ERROR: return "DATABASE_ERROR"
  case CalculatorErrorCode_TOO_BUSY_ERROR: return "TOO_BUSY_ERROR"
  }
  return "<UNSET>"
}

func CalculatorErrorCodeFromString(s string) (CalculatorErrorCode, error) {
  switch s {
  case "UNKNOWN_ERROR": return CalculatorErrorCode_UNKNOWN_ERROR, nil 
  case "DATABASE_ERROR": return CalculatorErrorCode_DATABASE_ERROR, nil 
  case "TOO_BUSY_ERROR": return CalculatorErrorCode_TOO_BUSY_ERROR, nil 
  }
  return CalculatorErrorCode(0), fmt.Errorf("not a valid CalculatorErrorCode string")
}


func CalculatorErrorCodePtr(v CalculatorErrorCode) *CalculatorErrorCode { return &v }

func (p CalculatorErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CalculatorErrorCode) UnmarshalText(text []byte) error {
q, err := CalculatorErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CalculatorErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CalculatorErrorCode(v)
return nil
}

func (p * CalculatorErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ErrorCode
//  - ErrorName
//  - Message
type CalculatorUserException struct {
  ErrorCode CalculatorErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorName string `thrift:"error_name,2,required" db:"error_name" json:"error_name"`
  Message *string `thrift:"message,3" db:"message" json:"message,omitempty"`
}

func NewCalculatorUserException() *CalculatorUserException {
  return &CalculatorUserException{}
}


func (p *CalculatorUserException) GetErrorCode() CalculatorErrorCode {
  return p.ErrorCode
}

func (p *CalculatorUserException) GetErrorName() string {
  return p.ErrorName
}
var CalculatorUserException_Message_DEFAULT string
func (p *CalculatorUserException) GetMessage() string {
  if !p.IsSetMessage() {
    return CalculatorUserException_Message_DEFAULT
  }
return *p.Message
}
func (p *CalculatorUserException) IsSetMessage() bool {
  return p.Message != nil
}

func (p *CalculatorUserException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetErrorName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorCode = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetErrorName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorName is not set"));
  }
  return nil
}

func (p *CalculatorUserException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := CalculatorErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *CalculatorUserException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorName = v
}
  return nil
}

func (p *CalculatorUserException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *CalculatorUserException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CalculatorUserException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculatorUserException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *CalculatorUserException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_name: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_name: ", p), err) }
  return err
}

func (p *CalculatorUserException) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  }
  return err
}

func (p *CalculatorUserException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorUserException(%+v)", *p)
}

func (p *CalculatorUserException) Error() string {
  return p.String()
}

// Attributes:
//  - ErrorCode
//  - ErrorName
//  - Message
type CalculatorSystemException struct {
  ErrorCode CalculatorErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorName string `thrift:"error_name,2,required" db:"error_name" json:"error_name"`
  Message *string `thrift:"message,3" db:"message" json:"message,omitempty"`
}

func NewCalculatorSystemException() *CalculatorSystemException {
  return &CalculatorSystemException{}
}


func (p *CalculatorSystemException) GetErrorCode() CalculatorErrorCode {
  return p.ErrorCode
}

func (p *CalculatorSystemException) GetErrorName() string {
  return p.ErrorName
}
var CalculatorSystemException_Message_DEFAULT string
func (p *CalculatorSystemException) GetMessage() string {
  if !p.IsSetMessage() {
    return CalculatorSystemException_Message_DEFAULT
  }
return *p.Message
}
func (p *CalculatorSystemException) IsSetMessage() bool {
  return p.Message != nil
}

func (p *CalculatorSystemException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetErrorName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorCode = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetErrorName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorName is not set"));
  }
  return nil
}

func (p *CalculatorSystemException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := CalculatorErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *CalculatorSystemException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorName = v
}
  return nil
}

func (p *CalculatorSystemException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *CalculatorSystemException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CalculatorSystemException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculatorSystemException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *CalculatorSystemException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_name: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_name: ", p), err) }
  return err
}

func (p *CalculatorSystemException) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  }
  return err
}

func (p *CalculatorSystemException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorSystemException(%+v)", *p)
}

func (p *CalculatorSystemException) Error() string {
  return p.String()
}

// Attributes:
//  - ErrorCode
//  - ErrorName
//  - Message
type CalculatorUnknownException struct {
  ErrorCode CalculatorErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorName string `thrift:"error_name,2,required" db:"error_name" json:"error_name"`
  Message string `thrift:"message,3,required" db:"message" json:"message"`
}

func NewCalculatorUnknownException() *CalculatorUnknownException {
  return &CalculatorUnknownException{}
}


func (p *CalculatorUnknownException) GetErrorCode() CalculatorErrorCode {
  return p.ErrorCode
}

func (p *CalculatorUnknownException) GetErrorName() string {
  return p.ErrorName
}

func (p *CalculatorUnknownException) GetMessage() string {
  return p.Message
}
func (p *CalculatorUnknownException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetErrorName bool = false;
  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorCode = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetErrorName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorName is not set"));
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *CalculatorUnknownException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := CalculatorErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *CalculatorUnknownException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorName = v
}
  return nil
}

func (p *CalculatorUnknownException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *CalculatorUnknownException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CalculatorUnknownException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculatorUnknownException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *CalculatorUnknownException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_name: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_name: ", p), err) }
  return err
}

func (p *CalculatorUnknownException) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  return err
}

func (p *CalculatorUnknownException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorUnknownException(%+v)", *p)
}

func (p *CalculatorUnknownException) Error() string {
  return p.String()
}

type CalculatorService interface {  //API

  Ping() (r bool, err error)
  // Parameters:
  //  - Num1
  //  - Num2
  Add(num1 int32, num2 int32) (r int32, err error)
  Ctx() context.Context
}

//API
type CalculatorServiceClient struct {
  Tracker tracker.Tracker
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewCalculatorServiceClientFactory(ttracker tracker.Tracker, t thrift.TTransport, f thrift.TProtocolFactory) (*CalculatorServiceClient, error) {
  iprot := f.GetProtocol(t)
  oprot := f.GetProtocol(t)
  if err := ttracker.Negotiation(1, iprot, oprot); err != nil {
      return nil, err
  }
  return &CalculatorServiceClient{
    Tracker: ttracker,
    Transport: t,
    ProtocolFactory: f,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 1,
  }, nil
}

func NewCalculatorServiceClientProtocol(ttracker tracker.Tracker, t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) (*CalculatorServiceClient, error) {
  if err := ttracker.Negotiation(1, iprot, oprot); err != nil {
      return nil, err
  }
  return &CalculatorServiceClient{
    Tracker: ttracker,
    Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 1,
  }, nil
}

func (p *CalculatorServiceClient) Ping(ctx context.Context) (r bool, err error) {
  if err = p.sendPing(ctx); err != nil { return }
  return p.recvPing()
}

func (p *CalculatorServiceClient) sendPing(ctx context.Context)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ping", thrift.CALL, p.SeqId); err != nil {
    return
}
if err = p.Tracker.TryWriteRequestHeader(ctx, oprot); err != nil {
    return
}
args := CalculatorServicePingArgs{
}
if err = args.Write(oprot); err != nil {
    return
}
if err = oprot.WriteMessageEnd(); err != nil {
    return
}
return oprot.Flush()
}


func (p *CalculatorServiceClient) recvPing() (value bool, err error) {
iprot := p.InputProtocol
if iprot == nil {
  iprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.InputProtocol = iprot
}
method, mTypeId, seqId, err := iprot.ReadMessageBegin()
if err != nil {
  return
}
if method != "ping" {
  err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
  return
}
if p.SeqId != seqId {
  err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
  return
}
if err = p.Tracker.TryReadResponseHeader(iprot); err != nil {
    return
}
if mTypeId == thrift.EXCEPTION {
  error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
  var error1 error
  error1, err = error0.Read(iprot)
  if err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  err = error1
  return
}
if mTypeId != thrift.REPLY {
  err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
  return
}
result := CalculatorServicePingResult{}
if err = result.Read(iprot); err != nil {
  return
}
if err = iprot.ReadMessageEnd(); err != nil {
  return
}
if result.UserException != nil {
  err = result.UserException
  return 
} else if result.SystemException != nil {
  err = result.SystemException
  return 
} else if result.UnknownException != nil {
  err = result.UnknownException
  return 
}
value = result.GetSuccess()
return
}

// Parameters:
//  - Num1
//  - Num2
func (p *CalculatorServiceClient) Add(ctx context.Context,num1 int32, num2 int32) (r int32, err error) {
if err = p.sendAdd(ctx, num1, num2); err != nil { return }
return p.recvAdd()
}

func (p *CalculatorServiceClient) sendAdd(ctx context.Context,num1 int32, num2 int32)(err error) {
oprot := p.OutputProtocol
if oprot == nil {
  oprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.OutputProtocol = oprot
}
p.SeqId++
if err = oprot.WriteMessageBegin("add", thrift.CALL, p.SeqId); err != nil {
  return
}
if err = p.Tracker.TryWriteRequestHeader(ctx, oprot); err != nil {
  return
}
args := CalculatorServiceAddArgs{
Num1 : num1,
Num2 : num2,
}
if err = args.Write(oprot); err != nil {
  return
}
if err = oprot.WriteMessageEnd(); err != nil {
  return
}
return oprot.Flush()
}


func (p *CalculatorServiceClient) recvAdd() (value int32, err error) {
iprot := p.InputProtocol
if iprot == nil {
  iprot = p.ProtocolFactory.GetProtocol(p.Transport)
  p.InputProtocol = iprot
}
method, mTypeId, seqId, err := iprot.ReadMessageBegin()
if err != nil {
  return
}
if method != "add" {
  err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "add failed: wrong method name")
  return
}
if p.SeqId != seqId {
  err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add failed: out of sequence response")
  return
}
if err = p.Tracker.TryReadResponseHeader(iprot); err != nil {
  return
}
if mTypeId == thrift.EXCEPTION {
  error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
  var error3 error
  error3, err = error2.Read(iprot)
  if err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  err = error3
  return
}
if mTypeId != thrift.REPLY {
  err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "add failed: invalid message type")
  return
}
result := CalculatorServiceAddResult{}
if err = result.Read(iprot); err != nil {
  return
}
if err = iprot.ReadMessageEnd(); err != nil {
  return
}
if result.UserException != nil {
  err = result.UserException
  return 
} else if result.SystemException != nil {
  err = result.SystemException
  return 
} else if result.UnknownException != nil {
  err = result.UnknownException
  return 
}
value = result.GetSuccess()
return
}


type CalculatorServiceProcessor struct {
  tracker tracker.Tracker
  processorMap map[string]thrift.TProcessorFunction
  handler CalculatorService
}

func (p *CalculatorServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CalculatorServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CalculatorServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCalculatorServiceProcessor(tracker tracker.Tracker, handler CalculatorService) *CalculatorServiceProcessor {

  self4 := &CalculatorServiceProcessor{tracker:tracker, handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["ping"] = &calculatorServiceProcessorPing{handler:handler, tracker:tracker}
  self4.processorMap["add"] = &calculatorServiceProcessorAdd{handler:handler, tracker:tracker}
return self4
}

func (p *CalculatorServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if name == tracker.TrackingAPIName {
    return p.tracker.TryUpgrade(seqId, iprot, oprot)
  }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x5

}

type calculatorServiceProcessorPing struct {
  tracker tracker.Tracker
  handler CalculatorService
}

func (p *calculatorServiceProcessorPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
if err = p.tracker.TryReadRequestHeader(iprot); err != nil {
  return
}
args := CalculatorServicePingArgs{}
if err = args.Read(iprot); err != nil {
  iprot.ReadMessageEnd()
  x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
  oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
  p.tracker.TryWriteResponseHeader(p.handler.Ctx(), oprot)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, err
}

iprot.ReadMessageEnd()
result := CalculatorServicePingResult{}
var retval bool
var err2 error
if retval, err2 = p.handler.Ping(); err2 != nil {
switch v := err2.(type) {
  case *CalculatorUserException:
result.UserException = v
  case *CalculatorSystemException:
result.SystemException = v
  case *CalculatorUnknownException:
result.UnknownException = v
  default:
  x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: " + err2.Error())
  oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
  p.tracker.TryWriteResponseHeader(p.handler.Ctx(), oprot)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return true, err2
}
} else {
result.Success = &retval
}
if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
  err = err2
}
if err2 = p.tracker.TryWriteResponseHeader(p.handler.Ctx(), oprot); err == nil && err2 != nil {
  err = err2
}
if err2 = result.Write(oprot); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.Flush(); err == nil && err2 != nil {
  err = err2
}
if err != nil {
  return
}
return true, err
}

type calculatorServiceProcessorAdd struct {
  tracker tracker.Tracker
  handler CalculatorService
}

func (p *calculatorServiceProcessorAdd) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
if err = p.tracker.TryReadRequestHeader(iprot); err != nil {
  return
}
args := CalculatorServiceAddArgs{}
if err = args.Read(iprot); err != nil {
  iprot.ReadMessageEnd()
  x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
  oprot.WriteMessageBegin("add", thrift.EXCEPTION, seqId)
  p.tracker.TryWriteResponseHeader(p.handler.Ctx(), oprot)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, err
}

iprot.ReadMessageEnd()
result := CalculatorServiceAddResult{}
var retval int32
var err2 error
if retval, err2 = p.handler.Add(args.Num1, args.Num2); err2 != nil {
switch v := err2.(type) {
  case *CalculatorUserException:
result.UserException = v
  case *CalculatorSystemException:
result.SystemException = v
  case *CalculatorUnknownException:
result.UnknownException = v
  default:
  x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add: " + err2.Error())
  oprot.WriteMessageBegin("add", thrift.EXCEPTION, seqId)
  p.tracker.TryWriteResponseHeader(p.handler.Ctx(), oprot)
  x.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return true, err2
}
} else {
result.Success = &retval
}
if err2 = oprot.WriteMessageBegin("add", thrift.REPLY, seqId); err2 != nil {
  err = err2
}
if err2 = p.tracker.TryWriteResponseHeader(p.handler.Ctx(), oprot); err == nil && err2 != nil {
  err = err2
}
if err2 = result.Write(oprot); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
  err = err2
}
if err2 = oprot.Flush(); err == nil && err2 != nil {
  err = err2
}
if err != nil {
  return
}
return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type CalculatorServicePingArgs struct {
}

func NewCalculatorServicePingArgs() *CalculatorServicePingArgs {
  return &CalculatorServicePingArgs{}
}

func (p *CalculatorServicePingArgs) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
if err := iprot.Skip(fieldTypeId); err != nil {
  return err
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *CalculatorServicePingArgs) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("ping_args"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *CalculatorServicePingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorServicePingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - UnknownException
type CalculatorServicePingResult struct {
Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
UserException *CalculatorUserException `thrift:"user_exception,1" db:"user_exception" json:"user_exception,omitempty"`
SystemException *CalculatorSystemException `thrift:"system_exception,2" db:"system_exception" json:"system_exception,omitempty"`
UnknownException *CalculatorUnknownException `thrift:"unknown_exception,3" db:"unknown_exception" json:"unknown_exception,omitempty"`
}

func NewCalculatorServicePingResult() *CalculatorServicePingResult {
  return &CalculatorServicePingResult{}
}

var CalculatorServicePingResult_Success_DEFAULT bool
func (p *CalculatorServicePingResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return CalculatorServicePingResult_Success_DEFAULT
  }
return *p.Success
}
var CalculatorServicePingResult_UserException_DEFAULT *CalculatorUserException
func (p *CalculatorServicePingResult) GetUserException() *CalculatorUserException {
  if !p.IsSetUserException() {
    return CalculatorServicePingResult_UserException_DEFAULT
  }
return p.UserException
}
var CalculatorServicePingResult_SystemException_DEFAULT *CalculatorSystemException
func (p *CalculatorServicePingResult) GetSystemException() *CalculatorSystemException {
  if !p.IsSetSystemException() {
    return CalculatorServicePingResult_SystemException_DEFAULT
  }
return p.SystemException
}
var CalculatorServicePingResult_UnknownException_DEFAULT *CalculatorUnknownException
func (p *CalculatorServicePingResult) GetUnknownException() *CalculatorUnknownException {
  if !p.IsSetUnknownException() {
    return CalculatorServicePingResult_UnknownException_DEFAULT
  }
return p.UnknownException
}
func (p *CalculatorServicePingResult) IsSetSuccess() bool {
return p.Success != nil
}

func (p *CalculatorServicePingResult) IsSetUserException() bool {
return p.UserException != nil
}

func (p *CalculatorServicePingResult) IsSetSystemException() bool {
return p.SystemException != nil
}

func (p *CalculatorServicePingResult) IsSetUnknownException() bool {
return p.UnknownException != nil
}

func (p *CalculatorServicePingResult) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
switch fieldId {
case 0:
  if fieldTypeId == thrift.BOOL {
    if err := p.ReadField0(iprot); err != nil {
      return err
    }
  } else {
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
  }
case 1:
  if fieldTypeId == thrift.STRUCT {
    if err := p.ReadField1(iprot); err != nil {
      return err
    }
  } else {
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
  }
case 2:
  if fieldTypeId == thrift.STRUCT {
    if err := p.ReadField2(iprot); err != nil {
      return err
    }
  } else {
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
  }
case 3:
  if fieldTypeId == thrift.STRUCT {
    if err := p.ReadField3(iprot); err != nil {
      return err
    }
  } else {
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
  }
default:
  if err := iprot.Skip(fieldTypeId); err != nil {
    return err
  }
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *CalculatorServicePingResult)  ReadField0(iprot thrift.TProtocol) error {
if v, err := iprot.ReadBool(); err != nil {
return thrift.PrependError("error reading field 0: ", err)
} else {
p.Success = &v
}
  return nil
}

func (p *CalculatorServicePingResult)  ReadField1(iprot thrift.TProtocol) error {
p.UserException = &CalculatorUserException{}
if err := p.UserException.Read(iprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
}
  return nil
}

func (p *CalculatorServicePingResult)  ReadField2(iprot thrift.TProtocol) error {
p.SystemException = &CalculatorSystemException{}
if err := p.SystemException.Read(iprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
}
  return nil
}

func (p *CalculatorServicePingResult)  ReadField3(iprot thrift.TProtocol) error {
p.UnknownException = &CalculatorUnknownException{}
if err := p.UnknownException.Read(iprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownException), err)
}
  return nil
}

func (p *CalculatorServicePingResult) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("ping_result"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
if err := p.writeField0(oprot); err != nil { return err }
if err := p.writeField1(oprot); err != nil { return err }
if err := p.writeField2(oprot); err != nil { return err }
if err := p.writeField3(oprot); err != nil { return err }
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *CalculatorServicePingResult) writeField0(oprot thrift.TProtocol) (err error) {
if p.IsSetSuccess() {
if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
if err := oprot.WriteBool(bool(*p.Success)); err != nil {
return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
}
  return err
}

func (p *CalculatorServicePingResult) writeField1(oprot thrift.TProtocol) (err error) {
if p.IsSetUserException() {
if err := oprot.WriteFieldBegin("user_exception", thrift.STRUCT, 1); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_exception: ", p), err) }
if err := p.UserException.Write(oprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_exception: ", p), err) }
}
  return err
}

func (p *CalculatorServicePingResult) writeField2(oprot thrift.TProtocol) (err error) {
if p.IsSetSystemException() {
if err := oprot.WriteFieldBegin("system_exception", thrift.STRUCT, 2); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:system_exception: ", p), err) }
if err := p.SystemException.Write(oprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 2:system_exception: ", p), err) }
}
  return err
}

func (p *CalculatorServicePingResult) writeField3(oprot thrift.TProtocol) (err error) {
if p.IsSetUnknownException() {
if err := oprot.WriteFieldBegin("unknown_exception", thrift.STRUCT, 3); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unknown_exception: ", p), err) }
if err := p.UnknownException.Write(oprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownException), err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unknown_exception: ", p), err) }
}
  return err
}

func (p *CalculatorServicePingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorServicePingResult(%+v)", *p)
}

// Attributes:
//  - Num1
//  - Num2
type CalculatorServiceAddArgs struct {
Num1 int32 `thrift:"num1,1" db:"num1" json:"num1"`
Num2 int32 `thrift:"num2,2" db:"num2" json:"num2"`
}

func NewCalculatorServiceAddArgs() *CalculatorServiceAddArgs {
  return &CalculatorServiceAddArgs{}
}


func (p *CalculatorServiceAddArgs) GetNum1() int32 {
  return p.Num1
}

func (p *CalculatorServiceAddArgs) GetNum2() int32 {
  return p.Num2
}
func (p *CalculatorServiceAddArgs) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
switch fieldId {
case 1:
  if fieldTypeId == thrift.I32 {
    if err := p.ReadField1(iprot); err != nil {
      return err
    }
  } else {
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
  }
case 2:
  if fieldTypeId == thrift.I32 {
    if err := p.ReadField2(iprot); err != nil {
      return err
    }
  } else {
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
  }
default:
  if err := iprot.Skip(fieldTypeId); err != nil {
    return err
  }
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *CalculatorServiceAddArgs)  ReadField1(iprot thrift.TProtocol) error {
if v, err := iprot.ReadI32(); err != nil {
return thrift.PrependError("error reading field 1: ", err)
} else {
p.Num1 = v
}
  return nil
}

func (p *CalculatorServiceAddArgs)  ReadField2(iprot thrift.TProtocol) error {
if v, err := iprot.ReadI32(); err != nil {
return thrift.PrependError("error reading field 2: ", err)
} else {
p.Num2 = v
}
  return nil
}

func (p *CalculatorServiceAddArgs) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("add_args"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
if err := p.writeField1(oprot); err != nil { return err }
if err := p.writeField2(oprot); err != nil { return err }
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *CalculatorServiceAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
if err := oprot.WriteFieldBegin("num1", thrift.I32, 1); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num1: ", p), err) }
if err := oprot.WriteI32(int32(p.Num1)); err != nil {
return thrift.PrependError(fmt.Sprintf("%T.num1 (1) field write error: ", p), err) }
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num1: ", p), err) }
  return err
}

func (p *CalculatorServiceAddArgs) writeField2(oprot thrift.TProtocol) (err error) {
if err := oprot.WriteFieldBegin("num2", thrift.I32, 2); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num2: ", p), err) }
if err := oprot.WriteI32(int32(p.Num2)); err != nil {
return thrift.PrependError(fmt.Sprintf("%T.num2 (2) field write error: ", p), err) }
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num2: ", p), err) }
  return err
}

func (p *CalculatorServiceAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorServiceAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - UnknownException
type CalculatorServiceAddResult struct {
Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
UserException *CalculatorUserException `thrift:"user_exception,1" db:"user_exception" json:"user_exception,omitempty"`
SystemException *CalculatorSystemException `thrift:"system_exception,2" db:"system_exception" json:"system_exception,omitempty"`
UnknownException *CalculatorUnknownException `thrift:"unknown_exception,3" db:"unknown_exception" json:"unknown_exception,omitempty"`
}

func NewCalculatorServiceAddResult() *CalculatorServiceAddResult {
  return &CalculatorServiceAddResult{}
}

var CalculatorServiceAddResult_Success_DEFAULT int32
func (p *CalculatorServiceAddResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return CalculatorServiceAddResult_Success_DEFAULT
  }
return *p.Success
}
var CalculatorServiceAddResult_UserException_DEFAULT *CalculatorUserException
func (p *CalculatorServiceAddResult) GetUserException() *CalculatorUserException {
  if !p.IsSetUserException() {
    return CalculatorServiceAddResult_UserException_DEFAULT
  }
return p.UserException
}
var CalculatorServiceAddResult_SystemException_DEFAULT *CalculatorSystemException
func (p *CalculatorServiceAddResult) GetSystemException() *CalculatorSystemException {
  if !p.IsSetSystemException() {
    return CalculatorServiceAddResult_SystemException_DEFAULT
  }
return p.SystemException
}
var CalculatorServiceAddResult_UnknownException_DEFAULT *CalculatorUnknownException
func (p *CalculatorServiceAddResult) GetUnknownException() *CalculatorUnknownException {
  if !p.IsSetUnknownException() {
    return CalculatorServiceAddResult_UnknownException_DEFAULT
  }
return p.UnknownException
}
func (p *CalculatorServiceAddResult) IsSetSuccess() bool {
return p.Success != nil
}

func (p *CalculatorServiceAddResult) IsSetUserException() bool {
return p.UserException != nil
}

func (p *CalculatorServiceAddResult) IsSetSystemException() bool {
return p.SystemException != nil
}

func (p *CalculatorServiceAddResult) IsSetUnknownException() bool {
return p.UnknownException != nil
}

func (p *CalculatorServiceAddResult) Read(iprot thrift.TProtocol) error {
if _, err := iprot.ReadStructBegin(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
}


for {
_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
if err != nil {
  return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
}
if fieldTypeId == thrift.STOP { break; }
switch fieldId {
case 0:
  if fieldTypeId == thrift.I32 {
    if err := p.ReadField0(iprot); err != nil {
      return err
    }
  } else {
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
  }
case 1:
  if fieldTypeId == thrift.STRUCT {
    if err := p.ReadField1(iprot); err != nil {
      return err
    }
  } else {
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
  }
case 2:
  if fieldTypeId == thrift.STRUCT {
    if err := p.ReadField2(iprot); err != nil {
      return err
    }
  } else {
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
  }
case 3:
  if fieldTypeId == thrift.STRUCT {
    if err := p.ReadField3(iprot); err != nil {
      return err
    }
  } else {
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
  }
default:
  if err := iprot.Skip(fieldTypeId); err != nil {
    return err
  }
}
if err := iprot.ReadFieldEnd(); err != nil {
  return err
}
}
if err := iprot.ReadStructEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}
return nil
}

func (p *CalculatorServiceAddResult)  ReadField0(iprot thrift.TProtocol) error {
if v, err := iprot.ReadI32(); err != nil {
return thrift.PrependError("error reading field 0: ", err)
} else {
p.Success = &v
}
  return nil
}

func (p *CalculatorServiceAddResult)  ReadField1(iprot thrift.TProtocol) error {
p.UserException = &CalculatorUserException{}
if err := p.UserException.Read(iprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
}
  return nil
}

func (p *CalculatorServiceAddResult)  ReadField2(iprot thrift.TProtocol) error {
p.SystemException = &CalculatorSystemException{}
if err := p.SystemException.Read(iprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
}
  return nil
}

func (p *CalculatorServiceAddResult)  ReadField3(iprot thrift.TProtocol) error {
p.UnknownException = &CalculatorUnknownException{}
if err := p.UnknownException.Read(iprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownException), err)
}
  return nil
}

func (p *CalculatorServiceAddResult) Write(oprot thrift.TProtocol) error {
if err := oprot.WriteStructBegin("add_result"); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
if p != nil {
if err := p.writeField0(oprot); err != nil { return err }
if err := p.writeField1(oprot); err != nil { return err }
if err := p.writeField2(oprot); err != nil { return err }
if err := p.writeField3(oprot); err != nil { return err }
}
if err := oprot.WriteFieldStop(); err != nil {
  return thrift.PrependError("write field stop error: ", err) }
if err := oprot.WriteStructEnd(); err != nil {
  return thrift.PrependError("write struct stop error: ", err) }
return nil
}

func (p *CalculatorServiceAddResult) writeField0(oprot thrift.TProtocol) (err error) {
if p.IsSetSuccess() {
if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
if err := oprot.WriteI32(int32(*p.Success)); err != nil {
return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
}
  return err
}

func (p *CalculatorServiceAddResult) writeField1(oprot thrift.TProtocol) (err error) {
if p.IsSetUserException() {
if err := oprot.WriteFieldBegin("user_exception", thrift.STRUCT, 1); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_exception: ", p), err) }
if err := p.UserException.Write(oprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_exception: ", p), err) }
}
  return err
}

func (p *CalculatorServiceAddResult) writeField2(oprot thrift.TProtocol) (err error) {
if p.IsSetSystemException() {
if err := oprot.WriteFieldBegin("system_exception", thrift.STRUCT, 2); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:system_exception: ", p), err) }
if err := p.SystemException.Write(oprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 2:system_exception: ", p), err) }
}
  return err
}

func (p *CalculatorServiceAddResult) writeField3(oprot thrift.TProtocol) (err error) {
if p.IsSetUnknownException() {
if err := oprot.WriteFieldBegin("unknown_exception", thrift.STRUCT, 3); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unknown_exception: ", p), err) }
if err := p.UnknownException.Write(oprot); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownException), err)
}
if err := oprot.WriteFieldEnd(); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unknown_exception: ", p), err) }
}
  return err
}

func (p *CalculatorServiceAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculatorServiceAddResult(%+v)", *p)
}


